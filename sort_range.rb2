#!/usr/bin/env ruby
# vim:set fileencoding=utf-8 ts=2 sw=2 sts=2 et:

# 使い方:
#   ./sort_range.rb {filename}
#     {filename}から整数列データを読み込み、ソートの行われていない範囲を出力します
#     なお、{filename}を省略した場合は、標準入力からデータを読み込みます
#
# 使用例:
#   ./sort_range.rb data/input_case_1.txt

# 注意点
#   このプログラムはUTF-8で記述したものをShift-JISに変換しています。(解答フォーマットに合わせるため)
#   プログラムを実行する前にUTF-8に再変換して下さい。

module SortRange
  refine Array do
    public

    # この配列の未ソートの範囲を返します
    # @return [Range] 未ソートの範囲
    # @return [nil] この配列がソート済みの場合
    # @example
    #   [1, 3, 4, 7, 11, 6, 8, 9, 7, 10, 13, 14].unsorted_range # => (3..9)
    #   [1, 2, 3].unsorted_range # => nil
    def unsorted_range
      sorted_list = sort
      list_pair = zip(sorted_list).each_with_index
      (_, _), first_index = list_pair             .find{|(num, sorted_num), index| num != sorted_num}
      (_, _), last_index  = list_pair.reverse_each.find{|(num, sorted_num), index| num != sorted_num}
      return (first_index && last_index) ? (first_index .. last_index) : nil
    end
  end
end

# 標準入出力とのやりとりを定義
module Interaction
  module_function

  # 改行区切りの整数データを整数の配列にして返します
  # @param [IO] io 
  # @return [Arran<Integer>]
  # @raise [RuntimeError] 入力データが不正なとき
  def read_list(io)
    lines = io.readlines.map(&:chomp).reject(&:empty?)
    if lines.any?{|line| line !~ /^\d+$/}
      raise RuntimeError, 'This program accept only decimal numbers.'
    end
    list = lines.map(&:to_i).freeze
  end

  # ソート範囲を解答の形式に整形して出力します
  # @param [Range] range ソート範囲
  # @return [void]
  # @example
  #   write_answer(0..9) # "1..10" を出力
  #   write_answer(nil)  # "0"     を出力
  def write_answer(range)
    if range
      # Range#first および Range.last は<0から始まる数>で定義されているため、
      # 解答用の表現である<1から始まる数>に変換して出力する
      puts "#{range.first + 1}..#{range.last + 1}"
    else
      puts 0
    end
  end
end


if $0 == __FILE__
  using SortRange
  include Interaction

  list = read_list(ARGF)
  range = list.unsorted_range
  write_answer(range)
end

